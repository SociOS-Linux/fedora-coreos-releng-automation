# This config is meant to be used for local testing of CoreOS OSTree
# Importer. The real config that will be used is over in Fedora's
# Ansible repo [1]. In order to test this with a local setup you'll
# need to change the amqp url to something like: `amqp_url = "amqp://192.168.121.2"`
#
# [1] https://infrastructure.fedoraproject.org/cgit/ansible.git/tree/roles/openshift-apps/coreos-ostree-importer/templates/fedora-messaging.toml#n23

amqp_url = "amqps://coreos-ostree-importer:@rabbitmq.fedoraproject.org/%2Fpubsub"
callback = "fedora_messaging.example:printer"

# In the production/private rabbitmq servers clients can't create
# queues dynamically. The client defaults to trying to create them.
# Setting this to true means the client will not attempt to create
# the queue on the server, but will just check to make sure it exists
# and configured correctly.
#passive_declares = true

# pick up the key/cert from the same directory as the messaging config
[tls]
ca_cert = "/etc/fedora-messaging/cacert.pem"
keyfile = "coreos.key"
certfile = "coreos.crt"

# Set the Application name/url/email
[client_properties]
app = "CoreOS OSTree Importer"
app_url = "https://github.com/coreos/fedora-coreos-releng-automation/tree/main/coreos-ostree-importer"
app_contacts_email = ["coreos@lists.fedoraproject.org"]

[exchanges."amq.topic"]
type = "topic"
durable = true
auto_delete = false
arguments = {}

# We'll use the coreos queue name
[queues.coreos-ostree-importer]
durable = true
auto_delete = false
exclusive = true
arguments = {}

# We care about the ostree-import message topic
[[bindings]]
queue = "coreos-ostree-importer"
exchange = "amq.topic"
routing_keys = ["org.fedoraproject.prod.coreos.build.request.ostree-import"]

[consumer_config]
example_key = "for my consumer"

[qos]
prefetch_size = 0
prefetch_count = 25

[log_config]
version = 1
disable_existing_loggers = true

# Adjust the log formatting based on preference
[log_config.formatters.simple]
format = "%(asctime)s %(levelname)s %(name)s - %(message)s"

[log_config.handlers.console]
class = "logging.StreamHandler"
formatter = "simple"
stream = "ext://sys.stdout"

# Set level to WARNING, otherwise too chatty
[log_config.loggers.fedora_messaging]
level = "WARNING"
propagate = false
handlers = ["console"]

# Set level to WARNING, otherwise too chatty
[log_config.loggers.twisted]
level = "WARNING"
propagate = false
handlers = ["console"]

[log_config.loggers.pika]
level = "WARNING"
propagate = false
handlers = ["console"]

# If your consumer sets up a logger, you must add a configuration for it
# here in order for the messages to show up. e.g. if it set up a logger
# called 'example_printer', you could do:
#[log_config.loggers.example_printer]
#level = "INFO"
#propagate = false
#handlers = ["console"]

[log_config.root]
level = "ERROR"
handlers = ["console"]
